Electroguard Special things:
In "start" "preferences" "raspberry pi configuration"
- Interfaces: enable the following "SPI" "I2C" "Remote GPIO"
- Localisation: "set locale-en,US, UTF-8"
- Wifi country: US

In "Files", "volume management"
- Unclick: "mount moutable volumes automatically.....
- Unclick: "mount removable media automatically when they are inserted"
- Unclick: "show available options...."

System libraries:
sudo apt-get update
sudo apt-get install python-smbus python3-smbus python-dev python3-dev i2c-tools

Startup:
- Electroguard.service copy into /home/pi/.config/systemd/user
- cp Electoguard.service etc/systemd/system
- systemctl enable Electroguard.service
- systemctl start Electroguard.service

Special commands:
- os.listdir
- os.walk
- sudo rm -r /media/pi/*
- sudo rm -rf /media/pi/*
- sudo rm -rf /media/pi/mount
- sudo mkdir -p /media/pi/mount
- sudo mount /sda1 /media/pi/mount
- systemctl --user stop Electroguard.service
- systemctl --user start Electroguard.service
- systemctl --user status Electroguard.service
- systemctl --user enable Electroguard.service
- systemctl --user disable Electroguard.service
- systemctl --user daemon-reload
- journalctl --follow --user-unit Electroguard.service



Copy ElectroguardPi directory into /home/pi
- Run Calibrate130.py 
0xXX01-Ch1 only, 0x02-Ch2 only, etc. 0x15 all channels selected
0x01xx-Ch1 common REF, 0x00xx-Ch1 common Sense
- Run TimeSerNum2.py, check time, enter SerialNumber
- Run ReadI2C, check time

Calibrate130.py:
   - logs data
   - programs serial number into a file, not into I2C
   - reads things from Non-Vol (calibration data)
   - acquires data 1/sec, writes data 1/30sec

I2C_EguardSimple.py:
   - reads I2C calibration data
   - checks checksum
   - computes gain and offset
   - writes gain and offset
   - numbers need for 0V and 1V need to be written before this routine
   - writes serial# to I2C memory

TimeSerNum2.py:
   - looks at current time
   - Checks to see if date/time is correct
   - if not, enters date/time, programs date/time
   - checksum for time

ReadI2C.py:
   - Reads data and time from RTC
   - Reads calibration constants
   - Reads Serial Number
   - Reads Checksums

CheckUSB.py:
   - looks for USB drive

LogData130.py:
   - programs serial number
   - reads things from Non-Vol (calibration data) 
   - reads ADCs
   - Does not use Calibration

scratchpad.py:
   - misc copy space

TimeSerNum.py: (old)
   - looks at current time
   - Checks to see if date/time is correct
   - if not, enters date/time, programs date/time

ElectroguardMeter1a.py:
   - meter display of channel 1

I2C Memory (0x6F):
0x01 - minutes
0x02 - hours
0x04 - date
0x05 - month
0x06 - year
0x20 - checksum (this appears to be the checksum of gains and offsets)
0x21 - chan sel
0x22 - ch1offset
0x23 - ch1gain
0x24 - ch2offset
0x25 - ch2gain
0x26 - ch3offset
0x27 - ch3gain
0x28 - ch4offset
0x29 - ch4gain
0x2A - checksum3 (checksum for time, not used)
0x2B - 
0x2C - 
0x2D - 
0x2E - 
0x2F - 
0x30 - SerNumLen
0x31 - checksum2 (this appears to be the checksum of the serial number this includes the length)
0x32 - Serial Number digit (first)
0x33 - Serial Number digit
0x34 - Serial Number digit
0x35 - Serial Number digit
0x36 - Serial Number digit
0x37 - Serial Number digit
0x38 - Serial Number digit
0x39 - Serial Number digit
0x3A - Serial Number digit
0x3B - Serial Number digit
0x3C - Serial Number digit
0x3D - Serial Number digit (last)
0x3E - Model Number digit  (first)
0x3F - Model Number digit
0x40 - Model Number digit  (last)
0x41 - 
0x42 - 
0x43 - 
0x44 - 
0x45 - 
0x46 - 
0x47 -
0x48 - 
0x49 -
0x4A -
0x4B -
0x4C -
0x4D -
0x4E -
0x4F -  
0x50 - 
0x51 - 
0x52 - 
0x53 - 
0x54 - 
0x55 - 
0x56 - 
0x57 - 
0x58 - 
0x59 - 
0x5A - 
0x5B - 
0x5C - 
0x5D - 
0x5E - 
0x5F - 

Testing:
Check clocks if RTC is not running, Pi clock needs to be set the same as the RTC